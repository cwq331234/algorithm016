class Solution {
    public int minPathSum(int[][] grid) {
        //去掉特殊情况
         if (grid == null || grid.length == 0 || grid[0].length == 0) {
            return 0;
        }
        //利用动态规划来做，构造一个和grid二维数组
        int rows = grid.length, columns = grid[0].length;
        int[][] dp = new int[rows][columns];
        dp[0][0] = grid[0][0];
        //第一横行和第一竖行，分别是它前面一个数加上它本身
        for (int i = 1; i < rows; i++) {
            dp[i][0] = dp[i - 1][0] + grid[i][0];
        }
        for (int j = 1; j < columns; j++) {
            dp[0][j] = dp[0][j - 1] + grid[0][j];
        }
        //中间的路径是：左边格子里的路径数和上面格子里的路径数，取最小值加它本身的路径数
        for (int i = 1; i < rows; i++) {
            for (int j = 1; j < columns; j++) {
                dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];
            }
        }
        return dp[rows - 1][columns - 1];
    }
}