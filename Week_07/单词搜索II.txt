class Solution {
    public List<String> findWords(char[][] board, String[] words) {
       List<String> list=new ArrayList<>();
       for( String word : words){
            char[][] board2=board;
            for(int i =0;i< board.length ; i++){
                 for(int j =0;j< board[0].length ; j++){
                    if(dfs( board2, word , i, j,0)) {
                        if(Inside(list,word)){
                            list.add(word); 
                        }                                               
                    }
                }
            }
        }
        return list;
    }
    //去重
    boolean Inside(List<String> notSelected, String num) {
        for (String i : notSelected) {
            if (i == num) {
                return false;
            }
        }
        return true;
    }
    //获取单个单词是否在二维数组中，79题
    boolean dfs(char[][] board,String word,int i,int j,int count){
        //当count大与word长度时，
        if(count >= word.length()) return true;
        // 出现异常情况时返回false;
        if(i<0 || i >= board.length  || j<0 || j >=board[0].length || (board[i][j] != word.charAt(count))) return false;
        //board[i][j] == word.charAt(count) 时，需要把board[i][j]变成别的数；
        char b=board[i][j];
        board[i][j] = ']';
        boolean boo1=dfs(board,word,i+1,j,count+1);
        if(boo1){
            board[i][j] = b;
            return true;
        }
        boolean boo2=dfs(board,word,i-1,j,count+1);
        if(boo2){
            board[i][j] = b;
            return true;
        }
        boolean boo3=dfs(board,word,i,j+1,count+1);
        if(boo3){
            board[i][j] = b;
            return true;
        }
        boolean boo4=dfs(board,word,i,j-1,count+1);
        if(boo4){
            board[i][j] = b;
            return true;
        }
        board[i][j] = b;
        return false;
    }
}