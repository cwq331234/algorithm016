class Solution {
    public int nthUglyNumber(int n) {
        if(n==1) return 1;
	//三指针做法，abc对应的时235的倍数，当它们的倍数加入数组时，再取下一个倍数，并且取的是这个三个数中的最小数。
        int a=0,b=0,c=0,count=1;
        int[] nums=new int[n];
        nums[0]=1;
        while(count < n){
            int k=minNumber(nums[a]*2 ,nums[b]*3,nums[c]*5);
            if( k==nums[a]*2 ) a++;
            if( k==nums[b]*3) b++;
            if( k==nums[c]*5) c++;
            nums[count] = k;
            count ++;
        }
        return nums[n-1];
    }

    int minNumber(int a,int b,int c){
        int w=0;
        if( a <= b){
            if(a<=c) w=a;
            if(c<=a) w=c;
        }
        if( b <= a) { 
            if(b<=c) w=b;
            if(c<=b) w=c;       
        }
        return w;
    }
}

时间复杂度O(n)
空间复杂度N(n)