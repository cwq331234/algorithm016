class Solution {
    
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        //创建哈希表，用于存放字典        
        Set<String> wordSet=new HashSet<>(wordList);
        //处理特殊情况：字典是空，结束词不在字典中
        if (wordSet.size() == 0 || !wordSet.contains(endWord)) {
            return 0;
        }
        //存放已经使用过的字典
        Set<String> visited = new HashSet<>();
        Set<String> beginSet=new HashSet<>();
        beginSet.add(beginWord);
        Set<String> endSet=new HashSet<>();
        endSet.add(endWord);
        int step = 1;
        while(!beginSet.isEmpty() && !endSet.isEmpty()){
             if (beginSet.size() > endSet.size()) {
                Set<String> temp = beginSet;
                beginSet = endSet;
                endSet = temp;
            }
            Set<String> nextLevelVisited = new HashSet<>();
            for (String word : beginSet) {
                if (changeWordEveryOneLetter(word, endSet, visited, wordSet, nextLevelVisited)) {
                    return step + 1;
                }
            }
            beginSet = nextLevelVisited;
            step++;
        }
        return 0;
    } 

      private boolean changeWordEveryOneLetter(String word, Set<String> endVisited,Set<String> visited,Set<String> wordSet,Set<String> nextLevelVisited){
        char[] charArray = word.toCharArray();
        for (int i = 0; i < word.length(); i++) {
            char originChar = charArray[i];
            for (char c = 'a'; c <= 'z'; c++) {
                if (originChar == c) {
                    continue;
                }
                charArray[i] = c;
                String nextWord = String.valueOf(charArray);
                if (wordSet.contains(nextWord)) {
                    if (endVisited.contains(nextWord)) {
                        return true;
                    }
                    if (!visited.contains(nextWord)) {
                        nextLevelVisited.add(nextWord);
                        visited.add(nextWord);
                    }
                }
            }
            charArray[i] = originChar;
        }
        return false;
    }
}

